// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  vec4 interpolate = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
  mat4 model_matrix = model(is_moon, animation_seconds);
  
  if(is_moon)
  {
    mat4 shrink_matrix = uniform_scale(0.3);
    vec4 shift_vector = vec4(sin(M_PI/2 * animation_seconds)*2, 0, cos(M_PI/2 * animation_seconds)*2, 0);
    view_pos_fs_in = model_matrix * vec4(normalize(interpolate.xyz),1) + shift_vector;
    pos_fs_in = model_matrix * shrink_matrix * vec4(normalize(interpolate.xyz),1) + shift_vector;
  }
  
  else
  {
    view_pos_fs_in = model_matrix * vec4(normalize(interpolate.xyz),1);
    pos_fs_in = model_matrix * vec4(normalize(interpolate.xyz),1);
  }
  
  pos_fs_in = proj * view * pos_fs_in;
  view_pos_fs_in = view * view_pos_fs_in;
  normal_fs_in = (transpose(inverse(view)) * transpose(inverse(model_matrix)) * vec4(normalize(interpolate.xyz),1)).xyz;
  sphere_fs_in = vec4(normalize(interpolate.xyz),1).xyz;
  gl_Position = pos_fs_in;
}


